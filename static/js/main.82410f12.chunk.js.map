{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","updatesuccess","res","setState","cases","data","death","deaths","recovered","state","Axios","get","then","catch","err","console","log","className","style","background","height","textAlign","alignSelf","color","padding","Card","border","backgroundColor","Body","Title","fontSize","animate","animationDuration","animationEasing","cx","cy","title","value","this","label","labelPosition","labelStyle","fontFamily","lengthAngle","lineWidth","onClick","undefined","onMouseOut","onMouseOver","paddingAngle","radius","rounded","startAngle","viewBoxSize","Text","React","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.82410f12.chunk.js","sourcesContent":["import React from 'react';\r\nimport Card from 'react-bootstrap/Card'\r\nimport ReactMinimalPieChart from 'react-minimal-pie-chart';\r\nimport Axios from 'axios';\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      cases:0,\r\n      death:0,\r\n      recovered:0\r\n    };\r\n  }\r\n async componentDidMount(){\r\n    await Axios.get('https://coronavirus-19-api.herokuapp.com/countries/India').then((res)=>this.updatesuccess(res)).catch((err)=>console.log(err))\r\n  }\r\n  updatesuccess = (res) =>{\r\n    // console.log(res.data)\r\n    this.setState({\r\n      cases:res.data.cases,\r\n      death:res.data.deaths,\r\n      recovered:res.data.recovered\r\n    });\r\n\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"row\" style={{background:'#2f4f4f', height: '100vh' }}>\r\n        <div className=\"col-md-4\"></div>\r\n        <div className=\"col-md-4\" style={{ textAlign: \"center\", alignSelf: 'center', color: 'white', padding: 5, }}>\r\n          <Card style={{ border: '1px solid black', backgroundColor: '#181819' }}>\r\n            <Card.Body>\r\n              <Card.Title style={{ fontSize: 50 }}>Corona Count India</Card.Title>\r\n              <hr></hr>\r\n              <ReactMinimalPieChart\r\n                animate={true}\r\n                animationDuration={500}\r\n                animationEasing=\"ease-out\"\r\n                cx={50}\r\n                cy={50}\r\n                data={[\r\n                  {\r\n                    color: '#ffff00',\r\n                    title: 'Coronavirus Cases',\r\n                    value: this.state.cases\r\n                  },\r\n                  {\r\n                    color: '#ff0025',\r\n                    title: 'Deaths',\r\n                    value: this.state.death\r\n                  },\r\n                  {\r\n                    color: '#49b675',\r\n                    title: 'Recovered',\r\n                    value: this.state.recovered\r\n                  }\r\n                ]}\r\n                label\r\n                labelPosition={60}\r\n                labelStyle={{\r\n                  fontFamily: 'sans-serif',\r\n                  fontSize: '5px'\r\n                }}\r\n                lengthAngle={360}\r\n                lineWidth={20}\r\n                onClick={undefined}\r\n                onMouseOut={undefined}\r\n                onMouseOver={undefined}\r\n                paddingAngle={18}\r\n                radius={50}\r\n                rounded\r\n                startAngle={0}\r\n                viewBoxSize={[\r\n                  100,\r\n                  100\r\n                ]}\r\n              />\r\n\r\n              <Card.Text>\r\n                <small className=\"text-muted\" style={{ color: 'white' }}>Last updated 3 mins ago</small>\r\n              </Card.Text>\r\n            </Card.Body>\r\n          </Card>\r\n        </div>\r\n\r\n        <div className=\"col-md-4\" ></div>\r\n\r\n      </div>\r\n      // <div></div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}