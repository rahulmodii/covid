{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","updatesuccess","res","console","log","data","setState","cases","death","deaths","recovered","state","Axios","get","then","catch","err","className","style","background","height","textAlign","alignSelf","color","padding","Card","border","backgroundColor","Body","Title","fontSize","animate","animationDuration","animationEasing","cx","cy","title","value","this","label","labelPosition","labelStyle","fontFamily","lengthAngle","lineWidth","onClick","undefined","onMouseOut","onMouseOver","paddingAngle","radius","rounded","startAngle","viewBoxSize","Text","React","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.be538c65.chunk.js","sourcesContent":["import React from 'react';\nimport Card from 'react-bootstrap/Card'\nimport ReactMinimalPieChart from 'react-minimal-pie-chart';\nimport Axios from 'axios';\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cases:0,\n      death:0,\n      recovered:0\n    };\n  }\n async componentDidMount(){\n    await Axios.get('https://coronavirus-19-api.herokuapp.com/countries/India').then((res)=>this.updatesuccess(res)).catch((err)=>console.log(err))\n  }\n  updatesuccess = (res) =>{\n    console.log(res.data)\n    this.setState({\n      cases:res.data.cases,\n      death:res.data.deaths,\n      recovered:res.data.recovered\n    });\n\n  }\n  render() {\n    return (\n      <div className=\"row\" style={{background:'#2f4f4f', height: '100vh' }}>\n        <div className=\"col-md-4\"></div>\n        <div className=\"col-md-4\" style={{ textAlign: \"center\", alignSelf: 'center', color: 'white', padding: 5, }}>\n          <Card style={{ border: '1px solid black', backgroundColor: '#181819' }}>\n            <Card.Body>\n              <Card.Title style={{ fontSize: 50 }}>Corona Count India</Card.Title>\n              <hr></hr>\n              <ReactMinimalPieChart\n                animate={true}\n                animationDuration={500}\n                animationEasing=\"ease-out\"\n                cx={50}\n                cy={50}\n                data={[\n                  {\n                    color: '#ffff00',\n                    title: 'Coronavirus Cases',\n                    value: this.state.cases\n                  },\n                  {\n                    color: '#ff0025',\n                    title: 'Deaths',\n                    value: this.state.death\n                  },\n                  {\n                    color: '#49b675',\n                    title: 'Recovered',\n                    value: this.state.recovered\n                  }\n                ]}\n                label\n                labelPosition={60}\n                labelStyle={{\n                  fontFamily: 'sans-serif',\n                  fontSize: '5px'\n                }}\n                lengthAngle={360}\n                lineWidth={20}\n                onClick={undefined}\n                onMouseOut={undefined}\n                onMouseOver={undefined}\n                paddingAngle={18}\n                radius={50}\n                rounded\n                startAngle={0}\n                viewBoxSize={[\n                  100,\n                  100\n                ]}\n              />\n\n              <Card.Text>\n                <small className=\"text-muted\" style={{ color: 'white' }}>Last updated 3 mins ago</small>\n              </Card.Text>\n            </Card.Body>\n          </Card>\n        </div>\n\n        <div className=\"col-md-4\" ></div>\n\n      </div>\n      // <div></div>\n\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}